#%%
# Image Processor

import os
import torch
from torchvision.transforms import PILToTensor
from Image_Dataset import FbMarketImageDataset
from torch.utils.data import DataLoader
from PIL import Image
import torch.nn.functional as F
from torchvision import transforms
from Transformers import data_transforms
from Resnet_Model import ResnetCNN
import clean_images
import pickle
from sklearn.preprocessing import LabelEncoder
import pandas as pd

le = LabelEncoder()

class imageProcessor():
    def __init__(self):
        
        pkl_file = open('image_decoder.pkl', 'rb')
        le_category = pickle.load(pkl_file)
        pkl_file.close()
        labels = dict(zip(le_category.classes_, 
                    le_category.transform(le_category.classes_)))

        print(labels)

        self.decoder = {x: y for (x, y) in enumerate(set(labels))}
        self.encoder = {y: x for (x, y) in enumerate(set(labels))}

    def prepare_image(self):
        image_cleaner = clean_images.CleanImages()
        image = image.cleaner(clean_image(self.image))
        with Image.open(image) as img:
            img = PILToTensor()(img)
            img = torch.flatten(img)
            img = img.numpy()
            self.img = self.transformer(img)

    def load_model(self):
        model = ResnetCNN()
        optimizer = torch.optim.Adam(model.parameters(), lr = 0.001)
        PATH = '2023-01-21__19_06_04_ACC-0.5833333333333334_16_image_cnn.pt'
        state_dict= torch.load(PATH)
        #remove_prefix = 'module.'
        #state_dict = {k[len(remove_prefix):] if k.startswith(remove_prefix) else k: v for k, v in state_dict.items()}
        model._load_from_state_dict(torch.load(PATH))
        

    def check_img_probs(self, file,model):
        image = self.prepare_image(file)
        final_image = image.resize(1, 3, 256, 256)
        y_hat = model(final_image)
        probs = F.softmax(y_hat, dim = 1)
        final_prob = probs.max(1)
        print(probs.tolist())
        _, prediction = y_hat.max(1)
        prediction = prediction.item()
        category = self.decoder(prediction)
        return (category, final_prob), probs.tolist()



if __name__ == "__main__":
    imageProcessor = imageProcessor()
    model = imageProcessor.load_model()
    os.chdir('/home/jazzy/Documents/AiCore_Projects/Facebook-Marketplace-Ranking/clean_images')
    for n, images in os.listdir():
        (category, probability), probabilities =  imageProcessor.check_imgs_probs(file = images, model=model)
        print(f"Image number: {n} \nCategory is: {category} \n")
        exit()
    


            
                       
# %%
